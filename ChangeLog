2011-12-16 James Morris <james@jwm-art.net>

	* player.c, player_death: fixed long standing but only
	  recently discovered bug where if consequence of player A
	  action is the death of player B, the game then switches
	  from using player A to using the deceased player B (who
	  is now invisible and no longer can push things but can
	  pass through force-fields).

	* scores.c: replaced specialized file I/O with use of the new
	  generalized data_file file I/O routines. moved map names
	  creation/destruction routines here *into* scores creation
	  destruction for easy capture of default map scores to beat.
	  recognize old scores routine never saved the score of map
	  15. scores validity checking.

	* data_file.c: various fixes, sanity checks, etc.

	* map.c: further map validation checks added.

	* player.[ch]: no longer dynamically allocating xor_move
	  upon each player movement. a xor_move embedded within the
	  player data struct is used instead.

	* map.[ch]: map->player struct xy now only used to store
	  initial player position (as indicated by comment) and no
	  longer updated to reflect player positions.

	* game_display.c, game_win_swap_update: doesn't use map
	  player coords anymore but player player coords.

	* maps/*.xcm, map_convert/maps/*.txt all have default
	  score added.


2011-12-12 James Morris <james@jwm-art.net>

	* data_file.[ch]: functions and data structure for reading
	  files of data represented in ASCII and each line having
	  a checksum. primarily to increase difficulty of casual
	  tampering, but also means files such as the replays are
	  portable [to be confirmed ;-)]. currently only the map is
	  using these functions, but the replay and scores (which
	  use specialized versions of similar code) will also be
	  converted. 

	* maps/*.txt: all replaced with XorCurses__Map files (*.xcm)

	* map.[ch]: now using data file for file i/o. strengthened
	  map validation. removed storage of file name from struct
	  xor_map, added best_moves (default score to beat per
	  level). cleaned up the mess caused by too many
	  xor_map_load_* functions.

	* map_tmp.[ch]: *DELETED* due to xor_map cleanup.


2011-12-09 James Morris <james@jwm-art.net>

	* scores.c: set scores for each level with corresponding
	  score read from file! (a simple oversight from a few
	  days ago when re-writing the scores file IO).

	* map.[ch], play_xor.c, replay.c: a more graceful handling
	  of failure to create/read maps.


2011-12-08 James Morris <james@jwm-art.net>

	* exit.[ch]: new files, implements exit animation of player
	  passing through the exit door (ie player slides into it).

	* info.[ch]: overhaul of map display code. removal of
	  map_overwrite_bad func. half-scale map display code now
	  has an order of precedence for displaying objects in the
	  map: exit, mask, wall, space, which is also useful for
	  erasing a collected mask from map. full-scale map display
	  code has been fixed to erase masks correctly.

	* player.c: remove call to info_win_update_map for every 4th
	  mask collected.

	* splash.c: big mask drawing moved to own function. addition
	  of splatter_masks function (may be removed). moving colour
	  bars animation for entry into a level.q

	* other stuff i can't be bothered to document right now.
	

2011-12-04 James Morris <james@jwm-art.net>

	* fletcher.[ch]: new file implementing fletcher16 checksum
	  see http://en.wikipedia.org/wiki/Fletcher%27s_checksum

	* types.c: new file implements function read_int (used
	  by scores.c and replay.c.

	* actions.h: addition of new action MV_PLAYER_EXIT
	* level_menu.c: improved update mechanism for difficulty.

	* play_xor.c: MV_PLAYER_QUIT is set rather than or'd.
	  PLAY_COMPLETE modifications for replay (see below).

	* replay.[ch]: replay file no longer consists of binary data.
	  new struct members: canplay and hasexit, used to prevent
	  play continuation from completed replays, and notify
	  replay mechanism of exit state before replay commenced.
	  file io code seperated out from UI load/save code.
	  use of fletcher16 checksums to discourage tampering.
	  saving of scroll thresh and difficulty.

	* scores.[ch]: scores file no longer consists of binary data.
	  use of fletcher16 to discourage tampering.


2011-11-28 James Morris <james@jwm-art.net>

	* Oldschool difficulty setting: once replay has started,
	  replay must complete before player is allowed to resume
	  gameplay. Setting of breakpoints in replay is disallowed.
	  If a replay is loaded while in oldschool mode, breakpoints
	  are ignored.

	* Scroll Threshhold: when scroll threshhold is changed
	  (by pressing 1, 2, or 3 during play) visual feedback is
	  provided (scroll threshhold does not work in oldschool
	  mode).

	* control_flow.h, debug.h, player.h, replay.h: additional
	  helpers for displaying enum/bitfield information.

	* control_flow.[ch]: addition FLOW enum entry 

	* replay.c: fixed bugs allowing game play
	  continuation after player death or level complete/exit.
	  Corrected some menu entry names.

	* control_flow.h

	* version.h: deleted.
	  VERSION is now set in Makefile and passed compile time.


2011-11-22 James Morris <james@jwm-art.net>

	* +debug.h for err_msg debug #defines.

	* replace all instances of 'fprint(stderr, ...' wrapped by
	  '#if DEBUG' with 'debug(...'.

	* replace all instances of 'fprint(stderr, ...' NOT wrapped
	  by '#if DEBUG' with 'err_msg(...'.

	* minor whitespace edits.
